From 8650d3a8ad93964569a92a2938e5820c01c883be Mon Sep 17 00:00:00 2001
From: Rodolfo Giometti <giometti@linux.it>
Date: Wed, 24 Jun 2015 21:58:50 +0200
Subject: [PATCH 1/1] Add support for I2C1 bus and the connected devices

Signed-off-by: Rodolfo Giometti <giometti@hce-engineering.com>
---
 patch.sh                                           |   8 +
 ...d-t5403-barometric-pressure-sensor-driver.patch | 341 +++++++++++++++++++++
 ...bone-common.dtsi-enable-bus-I2C1-on-pins-.patch |  59 ++++
 patches/defconfig                                  |   1 +
 4 files changed, 409 insertions(+)
 create mode 100644 patches/bbb-habp/0001-iio-Add-t5403-barometric-pressure-sensor-driver.patch
 create mode 100644 patches/bbb-habp/0100-arm-am335x-bone-common.dtsi-enable-bus-I2C1-on-pins-.patch

diff --git a/patch.sh b/patch.sh
index 83787f7..ed3a886 100644
--- a/patch.sh
+++ b/patch.sh
@@ -191,6 +191,12 @@ saucy () {
 	${git} "${DIR}/patches/saucy/0003-saucy-disable-stack-protector.patch"
 }
 
+bbb_habp () {
+	echo "dir: bbb-habp"
+	${git} "${DIR}/patches/bbb-habp/0001-iio-Add-t5403-barometric-pressure-sensor-driver.patch"
+	${git} "${DIR}/patches/bbb-habp/0100-arm-am335x-bone-common.dtsi-enable-bus-I2C1-on-pins-.patch"
+}
+
 ###
 #arm
 deassert_hard_reset
@@ -211,4 +217,6 @@ boards
 
 saucy
 
+bbb_habp
+
 echo "patch.sh ran successful"
diff --git a/patches/bbb-habp/0001-iio-Add-t5403-barometric-pressure-sensor-driver.patch b/patches/bbb-habp/0001-iio-Add-t5403-barometric-pressure-sensor-driver.patch
new file mode 100644
index 0000000..0a223b3
--- /dev/null
+++ b/patches/bbb-habp/0001-iio-Add-t5403-barometric-pressure-sensor-driver.patch
@@ -0,0 +1,341 @@
+From a2d8be6823017ccdde8db8b0f4fbe6a29580dd40 Mon Sep 17 00:00:00 2001
+From: Peter Meerwald <pmeerw@pmeerw.net>
+Date: Thu, 6 Feb 2014 20:44:00 +0000
+Subject: [PATCH 1/1] iio: Add t5403 barometric pressure sensor driver
+
+16-bit pressure and temperature sensor
+
+the chip can do I2C and SPI, only the I2C interface is supported
+by the driver at the moment
+
+datasheet: http://www.epcos.com/inf/57/ds/T5400.pdf
+application note: http://www.epcos.com/blob/993154/download/1/t5403-applicationnote.pdf
+
+an out-of-tree driver targetting the input subsystem is at
+https://github.com/unixphere/t5400, it was rejected here:
+http://comments.gmane.org/gmane.linux.kernel.input/28107
+
+v2: (thanks Hartmut Knaack)
+* fix MODE_HIGH, equals 2
+* check INT_TIME mask in write_raw()
+
+Signed-off-by: Peter Meerwald <pmeerw@pmeerw.net>
+Cc: Stefan Nilsson <stefan.nilsson@unixphere.com>
+Reviewed-by: Hartmut Knaack <knaack.h@gmx.de>
+Signed-off-by: Jonathan Cameron <jic23@kernel.org>
+
+diff --git a/drivers/iio/pressure/Kconfig b/drivers/iio/pressure/Kconfig
+index ffac8ac..15afbc9 100644
+--- a/drivers/iio/pressure/Kconfig
++++ b/drivers/iio/pressure/Kconfig
+@@ -70,4 +70,14 @@ config IIO_ST_PRESS_SPI
+ 	depends on IIO_ST_PRESS
+ 	depends on IIO_ST_SENSORS_SPI
+ 
++config T5403
++	tristate "EPCOS T5403 digital barometric pressure sensor driver"
++	depends on I2C
++	help
++	  Say yes here to build support for the EPCOS T5403 pressure sensor
++	  connected via I2C.
++
++          To compile this driver as a module, choose M here: the module
++          will be called t5403.
++
+ endmenu
+diff --git a/drivers/iio/pressure/Makefile b/drivers/iio/pressure/Makefile
+index c53d250..90a37e8 100644
+--- a/drivers/iio/pressure/Makefile
++++ b/drivers/iio/pressure/Makefile
+@@ -9,6 +9,7 @@ obj-$(CONFIG_MPL3115) += mpl3115.o
+ obj-$(CONFIG_IIO_ST_PRESS) += st_pressure.o
+ st_pressure-y := st_pressure_core.o
+ st_pressure-$(CONFIG_IIO_BUFFER) += st_pressure_buffer.o
++obj-$(CONFIG_T5403) += t5403.o
+ 
+ obj-$(CONFIG_IIO_ST_PRESS_I2C) += st_pressure_i2c.o
+ obj-$(CONFIG_IIO_ST_PRESS_SPI) += st_pressure_spi.o
+diff --git a/drivers/iio/pressure/t5403.c b/drivers/iio/pressure/t5403.c
+new file mode 100644
+index 0000000..e11cd39
+--- /dev/null
++++ b/drivers/iio/pressure/t5403.c
+@@ -0,0 +1,275 @@
++/*
++ * t5403.c - Support for EPCOS T5403 pressure/temperature sensor
++ *
++ * Copyright (c) 2014 Peter Meerwald <pmeerw@pmeerw.net>
++ *
++ * This file is subject to the terms and conditions of version 2 of
++ * the GNU General Public License.  See the file COPYING in the main
++ * directory of this archive for more details.
++ *
++ * (7-bit I2C slave address 0x77)
++ *
++ * TODO: end-of-conversion irq
++ */
++
++#include <linux/module.h>
++#include <linux/i2c.h>
++#include <linux/iio/iio.h>
++#include <linux/iio/sysfs.h>
++#include <linux/delay.h>
++
++#define T5403_DATA 0xf5 /* data, LSB first, 16 bit */
++#define T5403_CALIB_DATA 0x8e /* 10 calibration coeff., LSB first, 16 bit */
++#define T5403_SLAVE_ADDR 0x88 /* I2C slave address, 0x77 */
++#define T5403_COMMAND 0xf1
++
++/* command bits */
++#define T5403_MODE_SHIFT 3 /* conversion time: 2, 8, 16, 66 ms */
++#define T5403_PT BIT(1) /* 0 .. pressure, 1 .. temperature measurement */
++#define T5403_SCO BIT(0) /* start conversion */
++
++#define T5403_MODE_LOW 0
++#define T5403_MODE_STANDARD 1
++#define T5403_MODE_HIGH 2
++#define T5403_MODE_ULTRA_HIGH 3
++
++#define T5403_I2C_MASK (~BIT(7))
++#define T5403_I2C_ADDR 0x77
++
++static const int t5403_pressure_conv_ms[] = {2, 8, 16, 66};
++
++struct t5403_data {
++	struct i2c_client *client;
++	struct mutex lock;
++	int mode;
++	__le16 c[10];
++};
++
++#define T5403_C_U16(i) le16_to_cpu(data->c[(i) - 1])
++#define T5403_C(i) sign_extend32(T5403_C_U16(i), 15)
++
++static int t5403_read(struct t5403_data *data, bool pressure)
++{
++	int wait_time = 3;  /* wakeup time in ms */
++
++	int ret = i2c_smbus_write_byte_data(data->client, T5403_COMMAND,
++		(pressure ? (data->mode << T5403_MODE_SHIFT) : T5403_PT) |
++		T5403_SCO);
++	if (ret < 0)
++		return ret;
++
++	wait_time += pressure ? t5403_pressure_conv_ms[data->mode] : 2;
++
++	msleep(wait_time);
++
++	return i2c_smbus_read_word_data(data->client, T5403_DATA);
++}
++
++static int t5403_comp_pressure(struct t5403_data *data, int *val, int *val2)
++{
++	int ret;
++	s16 t_r;
++	u16 p_r;
++	s32 S, O, X;
++
++	mutex_lock(&data->lock);
++
++	ret = t5403_read(data, false);
++	if (ret < 0)
++		goto done;
++	t_r = ret;
++
++	ret = t5403_read(data, true);
++	if (ret < 0)
++		goto done;
++	p_r = ret;
++
++	/* see EPCOS application note */
++	S = T5403_C_U16(3) + (s32) T5403_C_U16(4) * t_r / 0x20000 +
++		T5403_C(5) * t_r / 0x8000 * t_r / 0x80000 +
++		T5403_C(9) * t_r / 0x8000 * t_r / 0x8000 * t_r / 0x10000;
++
++	O = T5403_C(6) * 0x4000 + T5403_C(7) * t_r / 8 +
++		T5403_C(8) * t_r / 0x8000 * t_r / 16 +
++		T5403_C(9) * t_r / 0x8000 * t_r / 0x10000 * t_r;
++
++	X = (S * p_r + O) / 0x4000;
++
++	X += ((X - 75000) * (X - 75000) / 0x10000 - 9537) *
++	    T5403_C(10) / 0x10000;
++
++	*val = X / 1000;
++	*val2 = (X % 1000) * 1000;
++
++done:
++	mutex_unlock(&data->lock);
++	return ret;
++}
++
++static int t5403_comp_temp(struct t5403_data *data, int *val)
++{
++	int ret;
++	s16 t_r;
++
++	mutex_lock(&data->lock);
++	ret = t5403_read(data, false);
++	if (ret < 0)
++		goto done;
++	t_r = ret;
++
++	/* see EPCOS application note */
++	*val = ((s32) T5403_C_U16(1) * t_r / 0x100 +
++		(s32) T5403_C_U16(2) * 0x40) * 1000 / 0x10000;
++
++done:
++	mutex_unlock(&data->lock);
++	return ret;
++}
++
++static int t5403_read_raw(struct iio_dev *indio_dev,
++			  struct iio_chan_spec const *chan,
++			  int *val, int *val2, long mask)
++{
++	struct t5403_data *data = iio_priv(indio_dev);
++	int ret;
++
++	switch (mask) {
++	case IIO_CHAN_INFO_PROCESSED:
++		switch (chan->type) {
++		case IIO_PRESSURE:
++			ret = t5403_comp_pressure(data, val, val2);
++			if (ret < 0)
++				return ret;
++			return IIO_VAL_INT_PLUS_MICRO;
++		case IIO_TEMP:
++			ret = t5403_comp_temp(data, val);
++			if (ret < 0)
++				return ret;
++			return IIO_VAL_INT;
++		default:
++			return -EINVAL;
++	    }
++	case IIO_CHAN_INFO_INT_TIME:
++		*val = 0;
++		*val2 = t5403_pressure_conv_ms[data->mode] * 1000;
++		return IIO_VAL_INT_PLUS_MICRO;
++	default:
++		return -EINVAL;
++	}
++}
++
++static int t5403_write_raw(struct iio_dev *indio_dev,
++			   struct iio_chan_spec const *chan,
++			   int val, int val2, long mask)
++{
++	struct t5403_data *data = iio_priv(indio_dev);
++	int i;
++
++	switch (mask) {
++	case IIO_CHAN_INFO_INT_TIME:
++		if (val != 0)
++			return -EINVAL;
++		for (i = 0; i < ARRAY_SIZE(t5403_pressure_conv_ms); i++)
++			if (val2 == t5403_pressure_conv_ms[i] * 1000) {
++				mutex_lock(&data->lock);
++				data->mode = i;
++				mutex_unlock(&data->lock);
++				return 0;
++			}
++		return -EINVAL;
++	default:
++		return -EINVAL;
++	}
++}
++
++static const struct iio_chan_spec t5403_channels[] = {
++	{
++		.type = IIO_PRESSURE,
++		.info_mask_separate = BIT(IIO_CHAN_INFO_PROCESSED) |
++		    BIT(IIO_CHAN_INFO_INT_TIME),
++	},
++	{
++		.type = IIO_TEMP,
++		.info_mask_separate = BIT(IIO_CHAN_INFO_PROCESSED),
++	},
++};
++
++static IIO_CONST_ATTR_INT_TIME_AVAIL("0.002 0.008 0.016 0.066");
++
++static struct attribute *t5403_attributes[] = {
++	&iio_const_attr_integration_time_available.dev_attr.attr,
++	NULL
++};
++
++static const struct attribute_group t5403_attribute_group = {
++	.attrs = t5403_attributes,
++};
++
++static const struct iio_info t5403_info = {
++	.read_raw = &t5403_read_raw,
++	.write_raw = &t5403_write_raw,
++	.attrs = &t5403_attribute_group,
++	.driver_module = THIS_MODULE,
++};
++
++static int t5403_probe(struct i2c_client *client,
++			 const struct i2c_device_id *id)
++{
++	struct t5403_data *data;
++	struct iio_dev *indio_dev;
++	int ret;
++
++	if (!i2c_check_functionality(client->adapter, I2C_FUNC_SMBUS_WORD_DATA |
++	    I2C_FUNC_SMBUS_I2C_BLOCK))
++		return -ENODEV;
++
++	ret = i2c_smbus_read_byte_data(client, T5403_SLAVE_ADDR);
++	if (ret < 0)
++		return ret;
++	if ((ret & T5403_I2C_MASK) != T5403_I2C_ADDR)
++		return -ENODEV;
++
++	indio_dev = iio_device_alloc(sizeof(*data));
++	if (!indio_dev)
++		return -ENOMEM;
++
++	data = iio_priv(indio_dev);
++	data->client = client;
++	mutex_init(&data->lock);
++
++	i2c_set_clientdata(client, indio_dev);
++	indio_dev->info = &t5403_info;
++	indio_dev->name = id->name;
++	indio_dev->dev.parent = &client->dev;
++	indio_dev->modes = INDIO_DIRECT_MODE;
++	indio_dev->channels = t5403_channels;
++	indio_dev->num_channels = ARRAY_SIZE(t5403_channels);
++
++	data->mode = T5403_MODE_STANDARD;
++
++	ret = i2c_smbus_read_i2c_block_data(data->client, T5403_CALIB_DATA,
++	    sizeof(data->c), (u8 *) data->c);
++	if (ret < 0)
++		return ret;
++
++	return iio_device_register(indio_dev);
++}
++
++static const struct i2c_device_id t5403_id[] = {
++	{ "t5403", 0 },
++	{ }
++};
++MODULE_DEVICE_TABLE(i2c, t5403_id);
++
++static struct i2c_driver t5403_driver = {
++	.driver = {
++		.name	= "t5403",
++	},
++	.probe = t5403_probe,
++	.id_table = t5403_id,
++};
++module_i2c_driver(t5403_driver);
++
++MODULE_AUTHOR("Peter Meerwald <pmeerw@pmeerw.net>");
++MODULE_DESCRIPTION("EPCOS T5403 pressure/temperature sensor driver");
++MODULE_LICENSE("GPL");
+-- 
+1.9.1
+
diff --git a/patches/bbb-habp/0100-arm-am335x-bone-common.dtsi-enable-bus-I2C1-on-pins-.patch b/patches/bbb-habp/0100-arm-am335x-bone-common.dtsi-enable-bus-I2C1-on-pins-.patch
new file mode 100644
index 0000000..1cd72dc
--- /dev/null
+++ b/patches/bbb-habp/0100-arm-am335x-bone-common.dtsi-enable-bus-I2C1-on-pins-.patch
@@ -0,0 +1,59 @@
+From f68f6e35389afe9b816a359e354d299010e3cd29 Mon Sep 17 00:00:00 2001
+From: Rodolfo Giometti <giometti@hce-engineering.com>
+Date: Wed, 24 Jun 2015 19:39:15 +0200
+Subject: [PATCH 1/1] arm am335x-bone-common.dtsi: enable bus I2C1 on pins
+ P9.17/P9.18
+
+Add also the devices htu21 & t5403.
+
+Signed-off-by: Rodolfo Giometti <giometti@hce-engineering.com>
+---
+ arch/arm/boot/dts/am335x-bone-common.dtsi | 25 +++++++++++++++++++++++++
+ 1 file changed, 25 insertions(+)
+
+diff --git a/arch/arm/boot/dts/am335x-bone-common.dtsi b/arch/arm/boot/dts/am335x-bone-common.dtsi
+index 5270d18..ba891ce 100644
+--- a/arch/arm/boot/dts/am335x-bone-common.dtsi
++++ b/arch/arm/boot/dts/am335x-bone-common.dtsi
+@@ -84,6 +84,13 @@
+ 		>;
+ 	};
+ 
++	i2c1_pins: pinmux_i2c1_pins {
++		pinctrl-single,pins = <
++			0x158 (PIN_INPUT_PULLUP | MUX_MODE2)    /* i2c1_sda.i2c1_sda */
++			0x15c (PIN_INPUT_PULLUP | MUX_MODE2)    /* i2c1_scl.i2c1_scl */
++		>;
++	};
++
+ 	i2c2_pins: pinmux_i2c2_pins {
+ 		pinctrl-single,pins = <
+ 			0x178 0x73 /* (SLEWCTRL_SLOW | PIN_INPUT_PULLUP | MUX_MODE3) uart1_ctsn.i2c2_sda */
+@@ -295,6 +302,24 @@
+ 	};
+ };
+ 
++&i2c1 {
++	pinctrl-names = "default";
++	pinctrl-0 = <&i2c1_pins>;
++
++	status = "okay";
++	clock-frequency = <400000>;
++
++	htu21: htu21@40 {
++		compatible = "htu21";
++		reg = <0x40>;
++	};
++
++	t5403: t5403@77 {
++		compatible = "t5403";
++		reg = <0x77>;
++	};
++};
++
+ &i2c2 {
+ 	status = "okay";
+ 	pinctrl-names = "default";
+-- 
+1.9.1
+
diff --git a/patches/defconfig b/patches/defconfig
index 7be0172..464301d 100644
--- a/patches/defconfig
+++ b/patches/defconfig
@@ -4529,6 +4529,7 @@ CONFIG_IIO_SYSFS_TRIGGER=m
 CONFIG_IIO_ST_PRESS=m
 CONFIG_IIO_ST_PRESS_I2C=m
 CONFIG_IIO_ST_PRESS_SPI=m
+CONFIG_T5403=m
 
 #
 # Temperature sensors
-- 
1.9.1

